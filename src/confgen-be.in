#!@PYTHON@

#
# RINA Configuration Generator (backend)
#
#    Francesco Salvestrini <f.salvestrini@nextworks.it>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA  02110-1301  USA

import sys
import os
import argparse

tag = "confgen-be"

def debug(message):
    print(tag + ": " + message)

def error(message):
    print(tag + ": " + message)

#
# Main
#

input_dir = None

try:
    parser = argparse.ArgumentParser(description='@PACKAGE_NAME@ (BE)',
                                     epilog='@PACKAGE_BUGREPORT@')
    parser.add_argument('--input-dir',
                        type=str,
                        metavar="NAME",
                        nargs=1,
                        help='the input directory containing the files ' + \
                             'to be processed')

    args = parser.parse_args()

    input_dir = args.input_dir[0]

    if (input_dir is None):
        raise Exception("Missing parameter(s)")
except Exception as e:
    error("Cannot parse options: " + str(e))
    sys.exit(1)

try:
    for dpath, dnames, fnames in os.walk(input_dir):
        for f in fnames:
            fullpath = os.path.join(dpath, f)
            debug("Running on " + fullpath)
    
except Exception as e:
    error("Cannot execute successfully: " + str(e))
    sys.exit(1)

sys.exit(0)
