#!@PYTHON@

#
# RINA Configuration Generator
#
#    Francesco Salvestrini <f.salvestrini@nextworks.it>
#    Sander Vrijders       <sander.vrijders@intec.ugent.be>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA  02110-1301  USA

import sys
import xml.dom.minidom
import argparse
import os.path
import json
import configparser
import collections
import datamodel as dm
import emulab_support as es

sys.path.append('@pkgpythondir@')

tag = "confgen"

def debug(message):
    print(tag + " DBG: : " + message)

def error(message):
    print(tag + " ERR: : " + message)

# Holding global vars here

nodes = []
difs = []
links = []
templates = {}
template_locs = collections.defaultdict(list)
vlan_count = 2
dif_to_vlan = {}

# string literals

normal_ipcp = "normal-ipc"
shim_eth_vlan = "shim-eth-vlan"

# Auxiliary functions

def find_node(node_name):
    for node in nodes:
        if node.name == node_name:
            return node
    raise LookupError("Could not find node in known nodes list")

def find_dif(dif_name):
    for dif in difs:
        if str(dif.name) == str(dif_name):
            return dif
    raise LookupError("Could not find DIF in known DIFs list")

def find_link(link_name):
    for link in links:
        if link.id == link_name:
            return link
    raise LookupError("Could not find link in links list")

def parse_dif(dif):
        new_dif = dm.dif(dif.getAttribute("id"))
        new_dif.dif_type = dif.getAttribute("type")

        if new_dif.dif_type == normal_ipcp:
            new_dif.template = dif.getAttribute("template")
        elif new_dif.dif_type == shim_eth_vlan:
            global vlan_count
            dif_to_vlan[new_dif.name] = vlan_count
            debug("Assigning VLAN " + str(vlan_count))
            new_dif.name = str(vlan_count)
            vlan_count += 1
            new_dif.link = dif.getAttribute("link")

        difs.append(new_dif)

def parse_app(app):
    nodes_d = app.getElementsByTagName("node")
    for node in nodes_d:
        node_n = find_node(node.getAttribute("name"))

        new_name = dm.rina_name(app.getAttribute("ap-name"), \
                                app.getAttribute("ap-instance"))

        new_app = dm.app(new_name)

        registrations = node.getElementsByTagName("register")[0]
        new_app.reg = str(registrations.getAttribute("dif-name"))

        node_n.apps.append(new_app)

def parse_ipcps(node):
    ipcps = node.getElementsByTagName("ipcp")

    node_n = find_node(node.getAttribute("id"))

    for ipcp in ipcps:
        new_name = dm.rina_name(ipcp.getAttribute("ap-name"), \
                                ipcp.getAttribute("ap-instance"))
        new_ipcp = dm.ipcp(new_name)
        new_ipcp.dif_name = ipcp.getAttribute("dif")

        registrations = ipcp.getElementsByTagName("register-dif")
        for dif in registrations:
            dif_name = str(dif.getAttribute("name"))
            new_ipcp.registrations.append(str(dif_name))

        node_n.ipcps.append(new_ipcp)

def parse_node(node):
    new_node = dm.node(node.getAttribute("id"))

    nodes.append(new_node)

def parse_link(link):
    new_link = dm.link(link.getAttribute("id"))

    a = link.getElementsByTagName("from")[0]
    new_link.node_a = a.getAttribute("node")

    b = link.getElementsByTagName("to")[0]
    new_link.node_b = b.getAttribute("node")

    links.append(new_link)

def cat_rina_name(name):
      return name.ap_name + "-" + \
          name.ap_inst + "-" + \
          name.ae_name + "-" + \
          name.ae_inst

def parse_xml_files():
    impl = xml.dom.minidom.getDOMImplementation()

    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    DOM_topology = xml.dom.minidom.parse(input_dir + "/" + topology_filename)

    debug("Parsing topology")

    topology = DOM_topology.documentElement
    assert topology.tagName == "topology"

    nodes_d = DOM_topology.getElementsByTagName("node")

    for node in nodes_d:
        parse_node(node)

    links_d = DOM_topology.getElementsByTagName("link")

    for link in links_d:
        parse_link(link)

    debug("Topology parsed successfully")

    DOM_ipcps = xml.dom.minidom.parse(input_dir + "/" + ipcps_filename)

    debug("Parsing ipcps")

    ipcps = DOM_ipcps.documentElement
    assert ipcps.tagName == "ipcps"

    nodes_d = DOM_ipcps.getElementsByTagName("node")

    for node in nodes_d:
        parse_ipcps(node)

    debug("IPCPs parsed successfully")

    DOM_apps = xml.dom.minidom.parse(input_dir + "/" + apps_filename)

    debug("Parsing apps")

    root = DOM_apps.documentElement
    assert root.tagName == "apps"

    apps = DOM_apps.getElementsByTagName("app")
    for app in apps:
        parse_app(app)
    debug("Apps parsed succesfully")

    DOM_difs = xml.dom.minidom.parse(input_dir + "/" + difs_filename)

    debug("Parsing DIFs")

    root = DOM_difs.documentElement
    assert root.tagName == "difs"

    difs_d = DOM_difs.getElementsByTagName("dif")
    for dif in difs_d:
        parse_dif(dif)
    debug("DIF parsing done")

    for node in nodes:
        for ipcp in node.ipcps:
            if ipcp.dif_name in dif_to_vlan:
                ipcp.dif_name = str(dif_to_vlan[ipcp.dif_name])
            for dif in ipcp.registrations:
                if dif in dif_to_vlan:
                    index = ipcp.registrations.index(dif)
                    ipcp.registrations[index] = str(dif_to_vlan[dif])

def gen_ipcm_configs():
    for node in nodes:
        dir_path = output_dir + "/" + node.name
        debug("Putting files in " + dir_path)
        if not os.path.exists(dir_path):
            os.makedirs(dir_path)

        f = open(os.path.join(dir_path, prefix_name + ".conf"),'w')

        local_conf =  {
            "installationPath" : "@prefix@/bin",
            "libraryPath" : "@libdir@",
            "logPath" : "@localstatedir@/log",
            "consolePort" : 32766,
            "pluginsPaths" : ["@libdir@/rinad/ipcp"]
        }

        app_to_dif = []
        if (node.apps != []):
            for app in node.apps:
                mapping = {
                    "encodedAppName" : cat_rina_name(app.name),
                    "difName" : app.reg
                }
                app_to_dif.append(mapping)

        ipcp_difs = {}
        ipcps = []
        for ipcp in node.ipcps:
            dif_n = find_dif(ipcp.dif_name)
            # Needed for DIF templates later on
            ipcp_difs[dif_n] = ipcp
            ipcp_dic = {
                "type" : dif_n.dif_type,
                "apName": ipcp.name.ap_name,
                "apInstance" : ipcp.name.ap_inst,
                "difName" : ipcp.dif_name,
                "difsToRegisterAt" : ipcp.registrations
            }

            ipcps.append(ipcp_dic)

        dif_confs = []
        for dif in ipcp_difs:
            if dif.dif_type == normal_ipcp:
                # Grab the template and update the addresses
                template_name = dif.template

                if template_name not in templates:
                    t = open(input_dir + "/" + template_name, 'r')
                    template = json.load(t)
                    templates[template_name] = template
                else:
                    template = templates[template_name]

                dif.addr_count += 1
                debug(dif.name + \
                      ": Assigning address: " + \
                      str(dif.addr_count))

                kia = {
                    "address" : dif.addr_count,
                    "apInstance" : ipcp_difs[dif].name.ap_inst,
                    "apName" : ipcp_difs[dif].name.ap_name
                }

                if "knownIPCProcessAddresses" in template:
                    template["knownIPCProcessAddresses"].append(kia)
                else:
                    template["knownIPCProcessAddresses"] = [kia]

                template_locs[template_name].append(dir_path)


            elif dif.dif_type == shim_eth_vlan:
                link_n = find_link(dif.link)
                template_name = shim_eth_vlan + "-" + \
                                str(dif.name) + ".dif"
                if link_n.node_a == node.name:
                    int_name = link_n.int_a.name
                else:
                    int_name = link_n.int_b.name
                template = {
                    "difType" : shim_eth_vlan,
                    "configParameters" : {
                        "interface-name" : int_name
                    }
                }
                with open(os.path.join(dir_path, template_name),'w') as s:
                    s.write(json.dumps(template, indent=4, \
                                       separators=(',', ': ')))

            dif_dic = {
                "name" : dif.name,
                "template" : template_name
            }
            dif_confs.append(dif_dic)

        complete_file = {
            "localConfiguration" : local_conf,
            "applicationToDIFMappings" : app_to_dif,
            "ipcProcessesToCreate" : ipcps,
            "difConfigurations" : dif_confs
        }

        f.write(json.dumps(complete_file, indent=4, separators=(',', ': ')))
        f.close()
    for template_name in templates:
        for loc in template_locs[template_name]:
            t = open(os.path.join(loc, template_name),'w')
            t.write(json.dumps(templates[template_name],
                               indent=4, separators=(',', ': ')))
            t.close()

def parse_wall_conf():
    config = configparser.ConfigParser()
    config.read(input_dir + '/'+ vwall_filename)
    section_header = "vwall_config"

    wall = config.get(section_header, 'wall')
    username = config.get(section_header, 'username')
    password = config.get(section_header, 'password')
    proj_name = config.get(section_header, 'proj_name')
    exp_name = config.get(section_header, 'exp_name')
    image = config.get(section_header, 'image')
    wall_config = es.wall_config(wall, username,
                                 password, proj_name,
                                 exp_name, image)
    return wall_config

def setup_vlans(wall_conf):
    for node in nodes:
        for ipcp in node.ipcps:
            dif_n = find_dif(str(ipcp.dif_name))
            if dif_n.dif_type == shim_eth_vlan:
                link_n = find_link(dif_n.link)
                if link_n.node_a == node.name:
                    int_name = link_n.int_a.name
                else:
                    int_name = link_n.int_b.name
                es.setup_vlan(node.name, dif_n.name, \
                              int_name, wall_conf)

def copy_confs_to_vwall(wall_conf):
    for node in nodes:
        debug("Copying files to vwall for node " + node.name)
        dir_path = output_dir + "/" + node.name
        for f in os.listdir(dir_path):
            file_name = os.path.join(dir_path, f)
            if os.path.isfile(file_name):
                debug("File is " + f)
                with open(file_name, 'r') as fh:
                    full_name = es.full_name(node.name, wall_conf)
                    es.copy_file_to_vwall(full_name, fh.read(), \
                                          f, wall_conf)
                    cmd = "sudo mv " + f + " @prefix@/etc/"
                    es.execute_command(full_name, cmd, wall_conf)

def start_ipcms(wall_conf):
    for node in nodes:
        debug("Starting IPCM on node " + node.name)
        full_name = es.full_name(node.name, wall_conf)
        cmd = 'nohup sudo @prefix@/bin/ipcm >/dev/null 2>&1 &'
        es.execute_command(full_name, cmd, wall_conf)

#
# Main
#

topology_filename = "topology.xml"
ipcps_filename    = "ipcps.xml"
apps_filename     = "apps.xml"
difs_filename     = "difs.xml"
vwall_filename    = "vwall.ini"
output_dir        = "configs"
input_dir         = "inputs"
prefix_name       = "ipcmanager"

try:
    parser = argparse.ArgumentParser(description='@PACKAGE_NAME@',
                                     epilog='@PACKAGE_BUGREPORT@')
    parser.add_argument('--topology',
                        type=str,
                        metavar="FILE",
                        default=[ topology_filename ],
                        nargs=1,
                        help='the topology XML filename ' + \
                             '(default: %(default)s)')

    parser.add_argument('--ipcps',
                        type=str,
                        metavar="FILE",
                        default=[ ipcps_filename ],
                        nargs=1,
                        help='the IPC Process XML filename ' + \
                             '(default: %(default)s)')

    parser.add_argument('--apps',
                        type=str,
                        metavar="FILE",
                        default=[ apps_filename ],
                        nargs=1,
                        help='the applications XML filename ' + \
                             '(default: %(default)s)')

    parser.add_argument('--difs',
                        type=str,
                        metavar="FILE",
                        default=[ difs_filename ],
                        nargs=1,
                        help='the DIFs XML filename ' + \
                             '(default: %(default)s)')

    parser.add_argument('--vwall-conf',
                        type=str,
                        metavar="FILE",
                        default=[ vwall_filename ],
                        nargs=1,
                        help='the Virtual Wall INI filename ' + \
                             '(default: %(default)s)')

    parser.add_argument('--output-dir',
                        type=str,
                        metavar="DIR",
                        default=[ output_dir ],
                        nargs=1,
                        help='the output dir of the XMLs ' + \
                             '(default: %(default)s)')

    parser.add_argument('--prefix',
                        type=str,
                        metavar="FILE",
                        default=[ prefix_name ],
                        nargs=1,
                        help='the prefix of the name of the output files ' + \
                             '(default: %(default)s)')

    parser.add_argument('--input-dir',
                        type=str,
                        metavar="DIR",
                        default=[ input_dir ],
                        nargs=1,
                        help='the input dir of the config files ' + \
                             '(default: %(default)s)')

    args = parser.parse_args()

    topology_filename = args.topology[0]
    ipcps_filename    = args.ipcps[0]
    apps_filename     = args.apps[0]
    difs_filename     = args.difs[0]
    vwall_filename    = args.vwall_conf[0]
    output_dir        = args.output_dir[0]
    prefix_name       = args.prefix[0]
    input_dir         = args.input_dir[0]
except Exception as e:
    error("Cannot parse options: " + str(e))
    sys.exit(1)

debug("Input args:")
debug("  Topology   = " + str(topology_filename))
debug("  IPCPs      = " + str(ipcps_filename))
debug("  Apps       = " + str(apps_filename))
debug("  DIFs       = " + str(difs_filename))
debug("  Vwall conf = " + str(vwall_filename))
debug("  Prefix     = " + str(prefix_name))
debug("  Output dir = " + str(output_dir))
debug("  Input dir  = " + str(input_dir))

try:
    wall_conf = parse_wall_conf()
    parse_xml_files()

    debug(es.create_experiment(nodes, links, wall_conf))
    debug(es.swap_exp_in(wall_conf))
    es.wait_until_nodes_up(wall_conf)
    es.emulab_topology(nodes, links, wall_conf)

    setup_vlans(wall_conf)
    es.insert_mods(nodes, wall_conf)

    gen_ipcm_configs()
    copy_confs_to_vwall(wall_conf)

    start_ipcms(wall_conf)

except Exception as e:
    error("Got a problem: " + str(e))
    sys.exit(1)

sys.exit(0)
